// src/keyboards.ts
import TelegramBot from 'node-telegram-bot-api';
import { Game, Player, Role, UserId, GamePhase, PlayerStatus } from './types';
import { CALLBACK_PREFIX_JOIN_GAME, CALLBACK_PREFIX_START_GAME, CALLBACK_PREFIX_VIEW_PLAYERS, CALLBACK_PREFIX_VOTE_PLAYER, CALLBACK_PREFIX_WEREWOLF_KILL, CALLBACK_PREFIX_SEER_CHECK, CALLBACK_PREFIX_WITCH_SAVE, CALLBACK_PREFIX_WITCH_POISON, ACTION_BUTTON_LABELS, CALLBACK_PREFIX_HUNTER_SHOOT } from './constants';

/**
 * ÂâµÂª∫ÈÅäÊà≤ÂæåÁöÑÂä†ÂÖ•ÊåâÈàï
 * @param gameId ÈÅäÊà≤ ID
 */
export const createJoinGameKeyboard = (gameId: string): TelegramBot.InlineKeyboardMarkup => {
  return {
    inline_keyboard: [
      [
        { text: 'üôã Âä†ÂÖ•ÈÅäÊà≤', callback_data: `${CALLBACK_PREFIX_JOIN_GAME}${gameId}` },
      ],
      [
        { text: 'üëÄ Êü•ÁúãÁé©ÂÆ∂', callback_data: `${CALLBACK_PREFIX_VIEW_PLAYERS}${gameId}` },
      ],
    ],
  };
};

/**
 * ÈÅäÊà≤Â§ßÂª≥ÈçµÁõ§ÔºåÂåÖÂê´ÈñãÂßãÈÅäÊà≤ÊåâÈàï (ÂÉÖÊàø‰∏ªÂèØË¶ã)
 * @param gameId ÈÅäÊà≤ ID
 * @param isGameMaster ÊòØÂê¶ÁÇ∫Êàø‰∏ª
 */
export const createGameLobbyKeyboard = (gameId: string, isGameMaster: boolean): TelegramBot.InlineKeyboardMarkup => {
  const keyboard: TelegramBot.InlineKeyboardButton[][] = [
    [
      { text: 'üôã ÊàëË¶ÅÂä†ÂÖ•/ÈÄÄÂá∫', callback_data: `${CALLBACK_PREFIX_JOIN_GAME}${gameId}` }, // Âä†ÂÖ•ÂíåÈÄÄÂá∫ÂèØ‰ª•Âêà‰ΩµÈÇèËºØ
      { text: 'üëÄ Êü•ÁúãÁï∂ÂâçÁé©ÂÆ∂', callback_data: `${CALLBACK_PREFIX_VIEW_PLAYERS}${gameId}` },
    ],
  ];
  if (isGameMaster) {
    keyboard.push([
      { text: '‚ñ∂Ô∏è ÈñãÂßãÈÅäÊà≤', callback_data: `${CALLBACK_PREFIX_START_GAME}${gameId}` },
    ]);
  }
  return { inline_keyboard: keyboard };
};

/**
 * ÁîüÊàêÈÄöÁî®ÁõÆÊ®ôÈÅ∏ÊìáÈçµÁõ§ (Áî®ÊñºÊäïÁ•®„ÄÅÁãº‰∫∫ÊÆ∫‰∫∫„ÄÅÈ†êË®ÄÂÆ∂Êü•‰∫∫Á≠â)
 * @param gameId ÈÅäÊà≤ ID
 * @param players Áé©ÂÆ∂ÂàóË°® (ÈÄöÂ∏∏ÊòØÂ≠òÊ¥ªÁöÑÁé©ÂÆ∂)
 * @param callbackPrefix ÂõûË™øÊï∏ÊìöÂâçÁ∂¥
 * @param actionUserId Âü∑Ë°åÂãï‰ΩúÁöÑÁé©ÂÆ∂ ID (ÂèØÈÅ∏ÔºåÁî®ÊñºÊéíÈô§Ëá™Â∑±)
 * @param filterSelf ÊòØÂê¶ÈÅéÊøæÊéâËá™Â∑± (‰æãÂ¶ÇÁãº‰∫∫‰∏çËÉΩÂàÄËá™Â∑±ÔºåÈ†êË®ÄÂÆ∂‰∏çËÉΩÊü•Ëá™Â∑±)
 */
export const createTargetSelectionKeyboard = (
  gameId: string,
  players: Player[],
  callbackPrefix: string,
  actionUserId?: UserId,
  filterSelf: boolean = false,
): TelegramBot.InlineKeyboardMarkup => {
  const inline_keyboard: TelegramBot.InlineKeyboardButton[][] = [];
  const row: TelegramBot.InlineKeyboardButton[] = [];

  players.forEach(player => {
    if (filterSelf && player.id === actionUserId) {
      return; // Ë∑≥ÈÅéËá™Â∑±
    }
    if (player.status === 'Â≠òÊ¥ª') {
      row.push({
        text: player.username || `Áé©ÂÆ∂${player.id}`,
        callback_data: `${callbackPrefix}${gameId}_${player.id}`,
      });
      if (row.length === 2) { // ÊØèË°åÊúÄÂ§ö2ÂÄãÊåâÈàïÔºåÂèØË™øÊï¥
        inline_keyboard.push([...row]);
        row.length = 0;
      }
    }
  });

  if (row.length > 0) {
    inline_keyboard.push(row);
  }
  
  // Ê∑ªÂä†Ê£ÑÁ•®/Ë∑≥ÈÅéÊåâÈàï (Ë¶ñÊÉÖÊ≥Å)
  if (callbackPrefix === CALLBACK_PREFIX_VOTE_PLAYER) {
    inline_keyboard.push([{
      text: ACTION_BUTTON_LABELS.SKIP_VOTE,
      callback_data: `${callbackPrefix}${gameId}_skip`
    }]);
  }
  // Áãº‰∫∫Ë°åÂãïÊôÇÊ≤íÊúâË∑≥ÈÅéÔºåÂøÖÈ†àÈÅ∏ÊìáÁõÆÊ®ô
  // È†êË®ÄÂÆ∂Ë°åÂãïÊôÇÈÄöÂ∏∏‰πüÊ≤íÊúâË∑≥ÈÅé

  return { inline_keyboard };
};

/**
 * ÂâµÂª∫Áãº‰∫∫Ë°åÂãïÁöÑÁõÆÊ®ôÈÅ∏ÊìáÈçµÁõ§
 * @param game ÈÅäÊà≤Â∞çË±°
 * @param werewolfId Âü∑Ë°åÊìç‰ΩúÁöÑÁãº‰∫∫ID
 */
export const createWerewolfActionKeyboard = (
  game: Game,
  werewolfId: UserId
): TelegramBot.InlineKeyboardMarkup => {
  const targetablePlayers = game.players.filter(
    player => player.status === PlayerStatus.ALIVE && 
              player.role !== Role.WEREWOLF &&
              player.id !== werewolfId // Though filtering by role !== WEREWOLF should cover this for the werewolf him/herself
  );

  // Note: The createTargetSelectionKeyboard already filters by player.status === 'Â≠òÊ¥ª'
  // but it's good practice to ensure the list passed is already pre-filtered for clarity.
  // The `filterSelf` in createTargetSelectionKeyboard will also ensure the werewolfId is not an option.
  return createTargetSelectionKeyboard(
    game.id,
    targetablePlayers,
    CALLBACK_PREFIX_WEREWOLF_KILL,
    werewolfId, // Pass werewolfId as actionUserId to be potentially used by filterSelf
    true        // filterSelf: true, ensures the acting werewolf cannot target themselves
  );
};

/**
 * Â•≥Â∑´Ë°åÂãïÈçµÁõ§
 * @param gameId ÈÅäÊà≤ ID
 * @param canUseSave ÊòØÂê¶ÂèØ‰ª•‰ΩøÁî®Ëß£Ëó•
 * @param canUsePoison ÊòØÂê¶ÂèØ‰ª•‰ΩøÁî®ÊØíËó•
 * @param targetPlayerIdForSave Ë¢´Áãº‰∫∫ÂàÄÁöÑÁé©ÂÆ∂ ID (Â¶ÇÊûúÊúâÔºå‰∏îÂ•≥Â∑´ÂèØÊïë)
 */
export const createWitchActionKeyboard = (
  gameId: string,
  canUseSave: boolean,
  canUsePoison: boolean,
  targetPlayerIdForSave?: UserId,
): TelegramBot.InlineKeyboardMarkup => {
  const keyboard: TelegramBot.InlineKeyboardButton[][] = [];

  if (canUseSave && targetPlayerIdForSave) {
    keyboard.push([
      {
        text: `${ACTION_BUTTON_LABELS.SAVE} (Êïë ${targetPlayerIdForSave})`,
        callback_data: `${CALLBACK_PREFIX_WITCH_SAVE}${gameId}_${targetPlayerIdForSave}`,
      },
    ]);
  }
  keyboard.push([
    {
      text: ACTION_BUTTON_LABELS.SKIP_SAVE,
      callback_data: `${CALLBACK_PREFIX_WITCH_SAVE}${gameId}_skip`,
    }
  ]);

  if (canUsePoison) {
    keyboard.push([
      {
        text: ACTION_BUTTON_LABELS.POISON,
        callback_data: `${CALLBACK_PREFIX_WITCH_POISON}${gameId}_select_target`, // ‰∏ã‰∏ÄÊ≠•ÊòØÈÅ∏ÊìáÁõÆÊ®ô
      },
    ]);
  }
  keyboard.push([
    {
      text: ACTION_BUTTON_LABELS.SKIP_POISON,
      callback_data: `${CALLBACK_PREFIX_WITCH_POISON}${gameId}_skip`,
    }
  ]);

  return { inline_keyboard: keyboard };
};

/**
 * Áçµ‰∫∫ÈñãÊßçÈçµÁõ§
 * @param gameId ÈÅäÊà≤ ID
 * @param players Â≠òÊ¥ªÁöÑÁé©ÂÆ∂ÂàóË°® (ÊéíÈô§Áçµ‰∫∫Ëá™Â∑±)
 * @param hunterId Áçµ‰∫∫ID
 */
export const createHunterShootKeyboard = (
    gameId: string,
    players: Player[],
    hunterId: UserId
): TelegramBot.InlineKeyboardMarkup => {
    const keyboard = createTargetSelectionKeyboard(gameId, players, CALLBACK_PREFIX_HUNTER_SHOOT, hunterId, true);
    // Áçµ‰∫∫ÂèØ‰ª•ÈÅ∏Êìá‰∏çÈñãÊßç
    if (keyboard.inline_keyboard) {
        keyboard.inline_keyboard.push([{
            text: ACTION_BUTTON_LABELS.SKIP_SHOOT,
            callback_data: `${CALLBACK_PREFIX_HUNTER_SHOOT}${gameId}_skip`
        }]);
    }
    return keyboard;
};
